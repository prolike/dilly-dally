1838507d3d72f5e8edc5e23ca94a40e9
"use strict";

var _interopRequireDefault = require("/home/oem/Desktop/Prolike/dilly-dally/app/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault");

var _testUtils = require("@vue/test-utils");

var _vueRouter = _interopRequireDefault(require("vue-router"));

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

var _User = _interopRequireDefault(require("@/views/users/User"));

const localVue = (0, _testUtils.createLocalVue)();
localVue.use(_vueRouter.default);
const router = new _vueRouter.default();
localVue.use(_bootstrapVue.default);
describe('User.vue', () => {
  it('has a name', () => {
    expect(_User.default.name).toMatch('User');
  });
  it('has a created hook', () => {
    expect(typeof _User.default.data).toMatch('function');
  });
  it('sets the correct default data', () => {
    expect(typeof _User.default.data).toMatch('function');

    const defaultData = _User.default.data();

    expect(defaultData.fields).toEqual([{
      key: 'key'
    }, {
      key: 'value'
    }]);
  });
  it('is Vue instance', () => {
    const wrapper = (0, _testUtils.shallowMount)(_User.default, {
      localVue,
      router
    });
    expect(wrapper.isVueInstance()).toBe(true);
  });
  it('is User', () => {
    const wrapper = (0, _testUtils.shallowMount)(_User.default, {
      localVue,
      router
    });
    expect(wrapper.is(_User.default)).toBe(true);
  });
  it('renders props.caption when passed', () => {
    const caption = 'User id:';
    const wrapper = (0, _testUtils.mount)(_User.default, {
      propsData: {
        caption
      },
      localVue,
      router
    });
    expect(wrapper.find('div.card-header').text()).toMatch(caption);
  });
  it('should have methods', () => {
    const wrapper = (0, _testUtils.shallowMount)(_User.default, {
      localVue,
      router
    });
    expect(typeof _User.default.methods.goBack).toEqual('function');
    expect(wrapper.vm.goBack()).toBeUndefined();
  });
  test('renders correctly', () => {
    const wrapper = (0, _testUtils.shallowMount)(_User.default, {
      localVue,
      router
    });
    expect(wrapper.element).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlVzZXIuc3BlYy5qcyJdLCJuYW1lcyI6WyJsb2NhbFZ1ZSIsInVzZSIsIlZ1ZVJvdXRlciIsInJvdXRlciIsIkJvb3RzdHJhcFZ1ZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJVc2VyIiwibmFtZSIsInRvTWF0Y2giLCJkYXRhIiwiZGVmYXVsdERhdGEiLCJmaWVsZHMiLCJ0b0VxdWFsIiwia2V5Iiwid3JhcHBlciIsImlzVnVlSW5zdGFuY2UiLCJ0b0JlIiwiaXMiLCJjYXB0aW9uIiwicHJvcHNEYXRhIiwiZmluZCIsInRleHQiLCJtZXRob2RzIiwiZ29CYWNrIiwidm0iLCJ0b0JlVW5kZWZpbmVkIiwidGVzdCIsImVsZW1lbnQiLCJ0b01hdGNoU25hcHNob3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxRQUFRLEdBQUcsZ0NBQWpCO0FBQ0FBLFFBQVEsQ0FBQ0MsR0FBVCxDQUFhQyxrQkFBYjtBQUNBLE1BQU1DLE1BQU0sR0FBRyxJQUFJRCxrQkFBSixFQUFmO0FBRUFGLFFBQVEsQ0FBQ0MsR0FBVCxDQUFhRyxxQkFBYjtBQUVBQyxRQUFRLENBQUMsVUFBRCxFQUFhLE1BQU07QUFDekJDLEVBQUFBLEVBQUUsQ0FBQyxZQUFELEVBQWUsTUFBTTtBQUNyQkMsSUFBQUEsTUFBTSxDQUFDQyxjQUFLQyxJQUFOLENBQU4sQ0FBa0JDLE9BQWxCLENBQTBCLE1BQTFCO0FBQ0QsR0FGQyxDQUFGO0FBR0FKLEVBQUFBLEVBQUUsQ0FBQyxvQkFBRCxFQUF1QixNQUFNO0FBQzdCQyxJQUFBQSxNQUFNLENBQUMsT0FBT0MsY0FBS0csSUFBYixDQUFOLENBQXlCRCxPQUF6QixDQUFpQyxVQUFqQztBQUNELEdBRkMsQ0FBRjtBQUdBSixFQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsTUFBTTtBQUN4Q0MsSUFBQUEsTUFBTSxDQUFDLE9BQU9DLGNBQUtHLElBQWIsQ0FBTixDQUF5QkQsT0FBekIsQ0FBaUMsVUFBakM7O0FBQ0EsVUFBTUUsV0FBVyxHQUFHSixjQUFLRyxJQUFMLEVBQXBCOztBQUNBSixJQUFBQSxNQUFNLENBQUNLLFdBQVcsQ0FBQ0MsTUFBYixDQUFOLENBQTJCQyxPQUEzQixDQUFtQyxDQUFDO0FBQUNDLE1BQUFBLEdBQUcsRUFBRTtBQUFOLEtBQUQsRUFBZTtBQUFDQSxNQUFBQSxHQUFHLEVBQUU7QUFBTixLQUFmLENBQW5DO0FBQ0QsR0FKQyxDQUFGO0FBS0FULEVBQUFBLEVBQUUsQ0FBQyxpQkFBRCxFQUFvQixNQUFNO0FBQzFCLFVBQU1VLE9BQU8sR0FBRyw2QkFBYVIsYUFBYixFQUFtQjtBQUNqQ1IsTUFBQUEsUUFEaUM7QUFFakNHLE1BQUFBO0FBRmlDLEtBQW5CLENBQWhCO0FBSUFJLElBQUFBLE1BQU0sQ0FBQ1MsT0FBTyxDQUFDQyxhQUFSLEVBQUQsQ0FBTixDQUFnQ0MsSUFBaEMsQ0FBcUMsSUFBckM7QUFDRCxHQU5DLENBQUY7QUFPQVosRUFBQUEsRUFBRSxDQUFDLFNBQUQsRUFBWSxNQUFNO0FBQ2xCLFVBQU1VLE9BQU8sR0FBRyw2QkFBYVIsYUFBYixFQUFtQjtBQUNqQ1IsTUFBQUEsUUFEaUM7QUFFakNHLE1BQUFBO0FBRmlDLEtBQW5CLENBQWhCO0FBSUFJLElBQUFBLE1BQU0sQ0FBQ1MsT0FBTyxDQUFDRyxFQUFSLENBQVdYLGFBQVgsQ0FBRCxDQUFOLENBQXlCVSxJQUF6QixDQUE4QixJQUE5QjtBQUNELEdBTkMsQ0FBRjtBQU9BWixFQUFBQSxFQUFFLENBQUMsbUNBQUQsRUFBc0MsTUFBTTtBQUM1QyxVQUFNYyxPQUFPLEdBQUcsVUFBaEI7QUFDQSxVQUFNSixPQUFPLEdBQUcsc0JBQU1SLGFBQU4sRUFBWTtBQUMxQmEsTUFBQUEsU0FBUyxFQUFFO0FBQUVELFFBQUFBO0FBQUYsT0FEZTtBQUUxQnBCLE1BQUFBLFFBRjBCO0FBRzFCRyxNQUFBQTtBQUgwQixLQUFaLENBQWhCO0FBS0FJLElBQUFBLE1BQU0sQ0FBQ1MsT0FBTyxDQUFDTSxJQUFSLENBQWEsaUJBQWIsRUFBZ0NDLElBQWhDLEVBQUQsQ0FBTixDQUErQ2IsT0FBL0MsQ0FBdURVLE9BQXZEO0FBQ0QsR0FSQyxDQUFGO0FBU0FkLEVBQUFBLEVBQUUsQ0FBQyxxQkFBRCxFQUF3QixNQUFNO0FBQzlCLFVBQU1VLE9BQU8sR0FBRyw2QkFBYVIsYUFBYixFQUFrQjtBQUNoQ1IsTUFBQUEsUUFEZ0M7QUFFaENHLE1BQUFBO0FBRmdDLEtBQWxCLENBQWhCO0FBS0FJLElBQUFBLE1BQU0sQ0FBQyxPQUFPQyxjQUFLZ0IsT0FBTCxDQUFhQyxNQUFyQixDQUFOLENBQW9DWCxPQUFwQyxDQUE0QyxVQUE1QztBQUNBUCxJQUFBQSxNQUFNLENBQUNTLE9BQU8sQ0FBQ1UsRUFBUixDQUFXRCxNQUFYLEVBQUQsQ0FBTixDQUE0QkUsYUFBNUI7QUFDRCxHQVJDLENBQUY7QUFTQUMsRUFBQUEsSUFBSSxDQUFDLG1CQUFELEVBQXNCLE1BQU07QUFDOUIsVUFBTVosT0FBTyxHQUFHLDZCQUFhUixhQUFiLEVBQW1CO0FBQ2pDUixNQUFBQSxRQURpQztBQUUvQkcsTUFBQUE7QUFGK0IsS0FBbkIsQ0FBaEI7QUFJQUksSUFBQUEsTUFBTSxDQUFDUyxPQUFPLENBQUNhLE9BQVQsQ0FBTixDQUF3QkMsZUFBeEI7QUFDRCxHQU5HLENBQUo7QUFPRCxDQW5ETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhbGxvd01vdW50LCBtb3VudCwgY3JlYXRlTG9jYWxWdWUgfSBmcm9tICdAdnVlL3Rlc3QtdXRpbHMnXG5pbXBvcnQgVnVlUm91dGVyIGZyb20gJ3Z1ZS1yb3V0ZXInXG5pbXBvcnQgQm9vdHN0cmFwVnVlIGZyb20gJ2Jvb3RzdHJhcC12dWUnXG5pbXBvcnQgVXNlciBmcm9tICdAL3ZpZXdzL3VzZXJzL1VzZXInXG5cbmNvbnN0IGxvY2FsVnVlID0gY3JlYXRlTG9jYWxWdWUoKVxubG9jYWxWdWUudXNlKFZ1ZVJvdXRlcilcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoKVxuXG5sb2NhbFZ1ZS51c2UoQm9vdHN0cmFwVnVlKVxuXG5kZXNjcmliZSgnVXNlci52dWUnLCAoKSA9PiB7XG4gIGl0KCdoYXMgYSBuYW1lJywgKCkgPT4ge1xuICAgIGV4cGVjdChVc2VyLm5hbWUpLnRvTWF0Y2goJ1VzZXInKVxuICB9KVxuICBpdCgnaGFzIGEgY3JlYXRlZCBob29rJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0eXBlb2YgVXNlci5kYXRhKS50b01hdGNoKCdmdW5jdGlvbicpXG4gIH0pXG4gIGl0KCdzZXRzIHRoZSBjb3JyZWN0IGRlZmF1bHQgZGF0YScsICgpID0+IHtcbiAgICBleHBlY3QodHlwZW9mIFVzZXIuZGF0YSkudG9NYXRjaCgnZnVuY3Rpb24nKVxuICAgIGNvbnN0IGRlZmF1bHREYXRhID0gVXNlci5kYXRhKClcbiAgICBleHBlY3QoZGVmYXVsdERhdGEuZmllbGRzKS50b0VxdWFsKFt7a2V5OiAna2V5J30sIHtrZXk6ICd2YWx1ZSd9XSlcbiAgfSlcbiAgaXQoJ2lzIFZ1ZSBpbnN0YW5jZScsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvd01vdW50KFVzZXIsIHtcbiAgICAgIGxvY2FsVnVlLFxuICAgICAgcm91dGVyXG4gICAgfSlcbiAgICBleHBlY3Qod3JhcHBlci5pc1Z1ZUluc3RhbmNlKCkpLnRvQmUodHJ1ZSlcbiAgfSlcbiAgaXQoJ2lzIFVzZXInLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3dNb3VudChVc2VyLCB7XG4gICAgICBsb2NhbFZ1ZSxcbiAgICAgIHJvdXRlclxuICAgIH0pXG4gICAgZXhwZWN0KHdyYXBwZXIuaXMoVXNlcikpLnRvQmUodHJ1ZSlcbiAgfSlcbiAgaXQoJ3JlbmRlcnMgcHJvcHMuY2FwdGlvbiB3aGVuIHBhc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBjYXB0aW9uID0gJ1VzZXIgaWQ6J1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChVc2VyLCB7XG4gICAgICBwcm9wc0RhdGE6IHsgY2FwdGlvbiB9LFxuICAgICAgbG9jYWxWdWUsXG4gICAgICByb3V0ZXJcbiAgICB9KVxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ2Rpdi5jYXJkLWhlYWRlcicpLnRleHQoKSkudG9NYXRjaChjYXB0aW9uKVxuICB9KVxuICBpdCgnc2hvdWxkIGhhdmUgbWV0aG9kcycsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvd01vdW50KFVzZXIse1xuICAgICAgbG9jYWxWdWUsXG4gICAgICByb3V0ZXJcbiAgICB9KVxuXG4gICAgZXhwZWN0KHR5cGVvZiBVc2VyLm1ldGhvZHMuZ29CYWNrICkudG9FcXVhbCgnZnVuY3Rpb24nKVxuICAgIGV4cGVjdCh3cmFwcGVyLnZtLmdvQmFjaygpKS50b0JlVW5kZWZpbmVkKClcbiAgfSlcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3dNb3VudChVc2VyLCB7XG4gICAgICBsb2NhbFZ1ZSxcbiAgICAgICAgcm91dGVyXG4gICAgfSlcbiAgICBleHBlY3Qod3JhcHBlci5lbGVtZW50KS50b01hdGNoU25hcHNob3QoKVxuICB9KVxufSlcbiJdfQ==