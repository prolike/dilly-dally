{"version":3,"sources":["utils.spec.js"],"names":["test","expect","random","constructor","Function","toBe","nRandom","toBeGreaterThanOrEqual","toBeLessThanOrEqual","shuffleArray","testArray","Array","a"],"mappings":";;AAAA;;AAEAA,IAAI,CAAC,QAAD,EAAW,MAAM;AACnBC,EAAAA,MAAM,CAACC,cAAOC,WAAP,KAAuBC,QAAxB,CAAN,CAAwCC,IAAxC,CAA6C,IAA7C;AACAJ,EAAAA,MAAM,CAAC,mBAAO,EAAP,EAAU,EAAV,CAAD,CAAN,CAAsBI,IAAtB,CAA2B,EAA3B;AACA,MAAIC,OAAO,GAAG,mBAAO,EAAP,EAAU,GAAV,CAAd;AACAL,EAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBC,sBAAhB,CAAuC,EAAvC;AACAN,EAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBE,mBAAhB,CAAoC,GAApC;AACAF,EAAAA,OAAO,GAAG,mBAAO,EAAP,EAAU,GAAV,CAAV;AACAL,EAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBC,sBAAhB,CAAuC,EAAvC;AACAN,EAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBE,mBAAhB,CAAoC,GAApC;AACAF,EAAAA,OAAO,GAAG,mBAAO,GAAP,EAAW,GAAX,CAAV;AACAL,EAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBC,sBAAhB,CAAuC,GAAvC;AACAN,EAAAA,MAAM,CAACK,OAAD,CAAN,CAAgBE,mBAAhB,CAAoC,GAApC;AACD,CAZG,CAAJ;AAcAR,IAAI,CAAC,cAAD,EAAiB,MAAM;AACzBC,EAAAA,MAAM,CAACQ,oBAAaN,WAAb,KAA6BC,QAA9B,CAAN,CAA8CC,IAA9C,CAAmD,IAAnD;AACA,MAAIK,SAAS,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAhB;AACAT,EAAAA,MAAM,CAAC,yBAAaS,SAAb,EAAwBP,WAAxB,KAAwCQ,KAAzC,CAAN,CAAsDN,IAAtD,CAA2D,IAA3D;AACAK,EAAAA,SAAS,GAAG,CAAC;AAACE,IAAAA,CAAC,EAAC;AAAH,GAAD,EAAO;AAACA,IAAAA,CAAC,EAAC;AAAH,GAAP,EAAa;AAACA,IAAAA,CAAC,EAAC;AAAH,GAAb,CAAZ;AACAX,EAAAA,MAAM,CAAC,yBAAaS,SAAb,EAAwBP,WAAxB,KAAwCQ,KAAzC,CAAN,CAAsDN,IAAtD,CAA2D,IAA3D;AACD,CANG,CAAJ","sourcesContent":["import { random, shuffleArray } from '@/shared/utils'\n\ntest('random', () => {\n  expect(random.constructor === Function).toBe(true)\n  expect(random(10,10)).toBe(10);\n  let nRandom = random(50,200)\n  expect(nRandom).toBeGreaterThanOrEqual(50)\n  expect(nRandom).toBeLessThanOrEqual(200)\n  nRandom = random(80,100)\n  expect(nRandom).toBeGreaterThanOrEqual(80)\n  expect(nRandom).toBeLessThanOrEqual(100)\n  nRandom = random(100,101)\n  expect(nRandom).toBeGreaterThanOrEqual(100)\n  expect(nRandom).toBeLessThanOrEqual(101)\n});\n\ntest('shuffleArray', () => {\n  expect(shuffleArray.constructor === Function).toBe(true)\n  let testArray = [1,2,3]\n  expect(shuffleArray(testArray).constructor === Array).toBe(true)\n  testArray = [{a:1},{a:2},{a:3}]\n  expect(shuffleArray(testArray).constructor === Array).toBe(true)\n})\n"]}