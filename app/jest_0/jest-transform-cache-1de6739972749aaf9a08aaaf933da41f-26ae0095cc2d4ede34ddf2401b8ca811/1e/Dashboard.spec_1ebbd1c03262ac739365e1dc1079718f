38273575cdf897c6e0c5e450ff9d761e
"use strict";

var _interopRequireDefault = require("/home/oem/Desktop/Prolike/dilly-dally/app/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault");

var _vue = _interopRequireDefault(require("vue"));

var _testUtils = require("@vue/test-utils");

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

var _Dashboard = _interopRequireDefault(require("@/views/Dashboard"));

_vue.default.use(_bootstrapVue.default);

describe('Dashboard.vue', () => {
  it('has a name', () => {
    expect(_Dashboard.default.name).toMatch('dashboard');
  });
  it('has a created hook', () => {
    expect(typeof _Dashboard.default.data).toMatch('function');
  });
  it('sets the correct default data', () => {
    expect(typeof _Dashboard.default.data).toMatch('function');

    const defaultData = _Dashboard.default.data();

    expect(defaultData.selected).toMatch('Month');
  });
  it('is Vue instance', () => {
    const wrapper = (0, _testUtils.shallowMount)(_Dashboard.default);
    expect(wrapper.isVueInstance()).toBe(true);
  });
  it('is Dashboard', () => {
    const wrapper = (0, _testUtils.shallowMount)(_Dashboard.default);
    expect(wrapper.is(_Dashboard.default)).toBe(true);
  });
  it('should render correct content', () => {
    const wrapper = (0, _testUtils.shallowMount)(_Dashboard.default);
    expect(wrapper.find('#traffic').text()).toMatch('Traffic');
  });
  test('renders correctly', () => {
    const wrapper = (0, _testUtils.shallowMount)(_Dashboard.default);
    expect(wrapper.element).toMatchSnapshot();
  });
  it('should have methods', () => {
    expect(typeof _Dashboard.default.methods.variant).toEqual('function');
    expect(_Dashboard.default.methods.variant(25)).toBe('info');
    expect(_Dashboard.default.methods.variant(50)).toBe('success');
    expect(_Dashboard.default.methods.variant(75)).toBe('warning');
    expect(_Dashboard.default.methods.variant(100)).toBe('danger');
    expect(typeof _Dashboard.default.methods.flag).toEqual('function');
    expect(_Dashboard.default.methods.flag('us')).toBe('flag-icon flag-icon-us');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRhc2hib2FyZC5zcGVjLmpzIl0sIm5hbWVzIjpbIlZ1ZSIsInVzZSIsIkJvb3RzdHJhcFZ1ZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJEYXNoYm9hcmQiLCJuYW1lIiwidG9NYXRjaCIsImRhdGEiLCJkZWZhdWx0RGF0YSIsInNlbGVjdGVkIiwid3JhcHBlciIsImlzVnVlSW5zdGFuY2UiLCJ0b0JlIiwiaXMiLCJmaW5kIiwidGV4dCIsInRlc3QiLCJlbGVtZW50IiwidG9NYXRjaFNuYXBzaG90IiwibWV0aG9kcyIsInZhcmlhbnQiLCJ0b0VxdWFsIiwiZmxhZyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBQSxhQUFJQyxHQUFKLENBQVFDLHFCQUFSOztBQUVBQyxRQUFRLENBQUMsZUFBRCxFQUFrQixNQUFNO0FBQzlCQyxFQUFBQSxFQUFFLENBQUMsWUFBRCxFQUFlLE1BQU07QUFDckJDLElBQUFBLE1BQU0sQ0FBQ0MsbUJBQVVDLElBQVgsQ0FBTixDQUF1QkMsT0FBdkIsQ0FBK0IsV0FBL0I7QUFDRCxHQUZDLENBQUY7QUFHQUosRUFBQUEsRUFBRSxDQUFDLG9CQUFELEVBQXVCLE1BQU07QUFDN0JDLElBQUFBLE1BQU0sQ0FBQyxPQUFPQyxtQkFBVUcsSUFBbEIsQ0FBTixDQUE4QkQsT0FBOUIsQ0FBc0MsVUFBdEM7QUFDRCxHQUZDLENBQUY7QUFHQUosRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDLE1BQU07QUFDeENDLElBQUFBLE1BQU0sQ0FBQyxPQUFPQyxtQkFBVUcsSUFBbEIsQ0FBTixDQUE4QkQsT0FBOUIsQ0FBc0MsVUFBdEM7O0FBQ0EsVUFBTUUsV0FBVyxHQUFHSixtQkFBVUcsSUFBVixFQUFwQjs7QUFDQUosSUFBQUEsTUFBTSxDQUFDSyxXQUFXLENBQUNDLFFBQWIsQ0FBTixDQUE2QkgsT0FBN0IsQ0FBcUMsT0FBckM7QUFDRCxHQUpDLENBQUY7QUFLQUosRUFBQUEsRUFBRSxDQUFDLGlCQUFELEVBQW9CLE1BQU07QUFDMUIsVUFBTVEsT0FBTyxHQUFHLDZCQUFhTixrQkFBYixDQUFoQjtBQUNBRCxJQUFBQSxNQUFNLENBQUNPLE9BQU8sQ0FBQ0MsYUFBUixFQUFELENBQU4sQ0FBZ0NDLElBQWhDLENBQXFDLElBQXJDO0FBQ0QsR0FIQyxDQUFGO0FBSUFWLEVBQUFBLEVBQUUsQ0FBQyxjQUFELEVBQWlCLE1BQU07QUFDdkIsVUFBTVEsT0FBTyxHQUFHLDZCQUFhTixrQkFBYixDQUFoQjtBQUNBRCxJQUFBQSxNQUFNLENBQUNPLE9BQU8sQ0FBQ0csRUFBUixDQUFXVCxrQkFBWCxDQUFELENBQU4sQ0FBOEJRLElBQTlCLENBQW1DLElBQW5DO0FBQ0QsR0FIQyxDQUFGO0FBSUFWLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxNQUFNO0FBQ3hDLFVBQU1RLE9BQU8sR0FBRyw2QkFBYU4sa0JBQWIsQ0FBaEI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDTyxPQUFPLENBQUNJLElBQVIsQ0FBYSxVQUFiLEVBQXlCQyxJQUF6QixFQUFELENBQU4sQ0FBd0NULE9BQXhDLENBQWdELFNBQWhEO0FBQ0QsR0FIQyxDQUFGO0FBSUFVLEVBQUFBLElBQUksQ0FBQyxtQkFBRCxFQUFzQixNQUFNO0FBQzlCLFVBQU1OLE9BQU8sR0FBRyw2QkFBYU4sa0JBQWIsQ0FBaEI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDTyxPQUFPLENBQUNPLE9BQVQsQ0FBTixDQUF3QkMsZUFBeEI7QUFDRCxHQUhHLENBQUo7QUFJQWhCLEVBQUFBLEVBQUUsQ0FBQyxxQkFBRCxFQUF3QixNQUFNO0FBQzlCQyxJQUFBQSxNQUFNLENBQUMsT0FBT0MsbUJBQVVlLE9BQVYsQ0FBa0JDLE9BQTFCLENBQU4sQ0FBMkNDLE9BQTNDLENBQW1ELFVBQW5EO0FBQ0FsQixJQUFBQSxNQUFNLENBQUNDLG1CQUFVZSxPQUFWLENBQWtCQyxPQUFsQixDQUEwQixFQUExQixDQUFELENBQU4sQ0FBc0NSLElBQXRDLENBQTJDLE1BQTNDO0FBQ0FULElBQUFBLE1BQU0sQ0FBQ0MsbUJBQVVlLE9BQVYsQ0FBa0JDLE9BQWxCLENBQTBCLEVBQTFCLENBQUQsQ0FBTixDQUFzQ1IsSUFBdEMsQ0FBMkMsU0FBM0M7QUFDQVQsSUFBQUEsTUFBTSxDQUFDQyxtQkFBVWUsT0FBVixDQUFrQkMsT0FBbEIsQ0FBMEIsRUFBMUIsQ0FBRCxDQUFOLENBQXNDUixJQUF0QyxDQUEyQyxTQUEzQztBQUNBVCxJQUFBQSxNQUFNLENBQUNDLG1CQUFVZSxPQUFWLENBQWtCQyxPQUFsQixDQUEwQixHQUExQixDQUFELENBQU4sQ0FBdUNSLElBQXZDLENBQTRDLFFBQTVDO0FBQ0FULElBQUFBLE1BQU0sQ0FBQyxPQUFPQyxtQkFBVWUsT0FBVixDQUFrQkcsSUFBMUIsQ0FBTixDQUF1Q0QsT0FBdkMsQ0FBK0MsVUFBL0M7QUFDQWxCLElBQUFBLE1BQU0sQ0FBQ0MsbUJBQVVlLE9BQVYsQ0FBa0JHLElBQWxCLENBQXVCLElBQXZCLENBQUQsQ0FBTixDQUFxQ1YsSUFBckMsQ0FBMEMsd0JBQTFDO0FBQ0QsR0FSQyxDQUFGO0FBU0QsQ0FyQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IHsgc2hhbGxvd01vdW50IH0gZnJvbSAnQHZ1ZS90ZXN0LXV0aWxzJ1xuaW1wb3J0IEJvb3RzdHJhcFZ1ZSBmcm9tICdib290c3RyYXAtdnVlJ1xuaW1wb3J0IERhc2hib2FyZCBmcm9tICdAL3ZpZXdzL0Rhc2hib2FyZCdcblxuVnVlLnVzZShCb290c3RyYXBWdWUpXG5cbmRlc2NyaWJlKCdEYXNoYm9hcmQudnVlJywgKCkgPT4ge1xuICBpdCgnaGFzIGEgbmFtZScsICgpID0+IHtcbiAgICBleHBlY3QoRGFzaGJvYXJkLm5hbWUpLnRvTWF0Y2goJ2Rhc2hib2FyZCcpXG4gIH0pXG4gIGl0KCdoYXMgYSBjcmVhdGVkIGhvb2snLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBEYXNoYm9hcmQuZGF0YSkudG9NYXRjaCgnZnVuY3Rpb24nKVxuICB9KVxuICBpdCgnc2V0cyB0aGUgY29ycmVjdCBkZWZhdWx0IGRhdGEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBEYXNoYm9hcmQuZGF0YSkudG9NYXRjaCgnZnVuY3Rpb24nKVxuICAgIGNvbnN0IGRlZmF1bHREYXRhID0gRGFzaGJvYXJkLmRhdGEoKVxuICAgIGV4cGVjdChkZWZhdWx0RGF0YS5zZWxlY3RlZCkudG9NYXRjaCgnTW9udGgnKVxuICB9KVxuICBpdCgnaXMgVnVlIGluc3RhbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93TW91bnQoRGFzaGJvYXJkKVxuICAgIGV4cGVjdCh3cmFwcGVyLmlzVnVlSW5zdGFuY2UoKSkudG9CZSh0cnVlKVxuICB9KVxuICBpdCgnaXMgRGFzaGJvYXJkJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93TW91bnQoRGFzaGJvYXJkKVxuICAgIGV4cGVjdCh3cmFwcGVyLmlzKERhc2hib2FyZCkpLnRvQmUodHJ1ZSlcbiAgfSlcbiAgaXQoJ3Nob3VsZCByZW5kZXIgY29ycmVjdCBjb250ZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93TW91bnQoRGFzaGJvYXJkKVxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJyN0cmFmZmljJykudGV4dCgpKS50b01hdGNoKCdUcmFmZmljJylcbiAgfSlcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3dNb3VudChEYXNoYm9hcmQpXG4gICAgZXhwZWN0KHdyYXBwZXIuZWxlbWVudCkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcbiAgaXQoJ3Nob3VsZCBoYXZlIG1ldGhvZHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBEYXNoYm9hcmQubWV0aG9kcy52YXJpYW50ICApLnRvRXF1YWwoJ2Z1bmN0aW9uJylcbiAgICBleHBlY3QoRGFzaGJvYXJkLm1ldGhvZHMudmFyaWFudCgyNSkpLnRvQmUoJ2luZm8nKVxuICAgIGV4cGVjdChEYXNoYm9hcmQubWV0aG9kcy52YXJpYW50KDUwKSkudG9CZSgnc3VjY2VzcycpXG4gICAgZXhwZWN0KERhc2hib2FyZC5tZXRob2RzLnZhcmlhbnQoNzUpKS50b0JlKCd3YXJuaW5nJylcbiAgICBleHBlY3QoRGFzaGJvYXJkLm1ldGhvZHMudmFyaWFudCgxMDApKS50b0JlKCdkYW5nZXInKVxuICAgIGV4cGVjdCh0eXBlb2YgRGFzaGJvYXJkLm1ldGhvZHMuZmxhZyApLnRvRXF1YWwoJ2Z1bmN0aW9uJylcbiAgICBleHBlY3QoRGFzaGJvYXJkLm1ldGhvZHMuZmxhZygndXMnKSkudG9CZSgnZmxhZy1pY29uIGZsYWctaWNvbi11cycpXG4gIH0pXG59KVxuIl19