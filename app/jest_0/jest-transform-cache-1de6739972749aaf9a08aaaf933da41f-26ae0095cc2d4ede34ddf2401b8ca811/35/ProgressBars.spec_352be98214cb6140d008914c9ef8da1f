d75d10690ac91ea0477eb9336a38acb4
"use strict";

var _interopRequireDefault = require("/home/oem/Desktop/Prolike/dilly-dally/app/node_modules/@babel/runtime-corejs2/helpers/interopRequireDefault");

var _vue = _interopRequireDefault(require("vue"));

var _testUtils = require("@vue/test-utils");

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

var _ProgressBars = _interopRequireDefault(require("@/views/base/ProgressBars"));

_vue.default.use(_bootstrapVue.default);

jest.useFakeTimers();
describe('ProgressBars.vue', () => {
  it('has a name', () => {
    expect(_ProgressBars.default.name).toMatch('progress-bars');
  });
  it('has a created hook', () => {
    expect(typeof _ProgressBars.default.data).toMatch('function');
  });
  it('sets the correct default data', () => {
    expect(typeof _ProgressBars.default.data).toMatch('function');

    const defaultData = _ProgressBars.default.data();

    expect(defaultData.counter).toBe(45);
  });
  it('is Vue instance', () => {
    const wrapper = (0, _testUtils.mount)(_ProgressBars.default);
    expect(wrapper.isVueInstance()).toBe(true);
  });
  it('is ProgressBars', () => {
    const wrapper = (0, _testUtils.mount)(_ProgressBars.default);
    expect(wrapper.is(_ProgressBars.default)).toBe(true);
  });
  it('should render correct content', () => {
    const wrapper = (0, _testUtils.mount)(_ProgressBars.default);
    expect(wrapper.find('header.card-header > div > strong').text()).toMatch('Bootstrap Progress');
  });
  test('renders correctly', () => {
    const wrapper = (0, _testUtils.shallowMount)(_ProgressBars.default);
    expect(wrapper.element).toMatchSnapshot();
  });
  it('should be destroyed', () => {
    const wrapper = (0, _testUtils.mount)(_ProgressBars.default);
    wrapper.destroy();
  });
  it('should have methods', () => {
    expect(typeof _ProgressBars.default.methods.clicked).toEqual('function');
    expect(_ProgressBars.default.methods.clicked()).toBeUndefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb2dyZXNzQmFycy5zcGVjLmpzIl0sIm5hbWVzIjpbIlZ1ZSIsInVzZSIsIkJvb3RzdHJhcFZ1ZSIsImplc3QiLCJ1c2VGYWtlVGltZXJzIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsIlByb2dyZXNzQmFycyIsIm5hbWUiLCJ0b01hdGNoIiwiZGF0YSIsImRlZmF1bHREYXRhIiwiY291bnRlciIsInRvQmUiLCJ3cmFwcGVyIiwiaXNWdWVJbnN0YW5jZSIsImlzIiwiZmluZCIsInRleHQiLCJ0ZXN0IiwiZWxlbWVudCIsInRvTWF0Y2hTbmFwc2hvdCIsImRlc3Ryb3kiLCJtZXRob2RzIiwiY2xpY2tlZCIsInRvRXF1YWwiLCJ0b0JlVW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUFBLGFBQUlDLEdBQUosQ0FBUUMscUJBQVI7O0FBRUFDLElBQUksQ0FBQ0MsYUFBTDtBQUVBQyxRQUFRLENBQUMsa0JBQUQsRUFBcUIsTUFBTTtBQUNqQ0MsRUFBQUEsRUFBRSxDQUFDLFlBQUQsRUFBZSxNQUFNO0FBQ3JCQyxJQUFBQSxNQUFNLENBQUNDLHNCQUFhQyxJQUFkLENBQU4sQ0FBMEJDLE9BQTFCLENBQWtDLGVBQWxDO0FBQ0QsR0FGQyxDQUFGO0FBR0FKLEVBQUFBLEVBQUUsQ0FBQyxvQkFBRCxFQUF1QixNQUFNO0FBQzdCQyxJQUFBQSxNQUFNLENBQUMsT0FBT0Msc0JBQWFHLElBQXJCLENBQU4sQ0FBaUNELE9BQWpDLENBQXlDLFVBQXpDO0FBQ0QsR0FGQyxDQUFGO0FBR0FKLEVBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxNQUFNO0FBQ3hDQyxJQUFBQSxNQUFNLENBQUMsT0FBT0Msc0JBQWFHLElBQXJCLENBQU4sQ0FBaUNELE9BQWpDLENBQXlDLFVBQXpDOztBQUNBLFVBQU1FLFdBQVcsR0FBR0osc0JBQWFHLElBQWIsRUFBcEI7O0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0ssV0FBVyxDQUFDQyxPQUFiLENBQU4sQ0FBNEJDLElBQTVCLENBQWlDLEVBQWpDO0FBQ0QsR0FKQyxDQUFGO0FBS0FSLEVBQUFBLEVBQUUsQ0FBQyxpQkFBRCxFQUFvQixNQUFNO0FBQzFCLFVBQU1TLE9BQU8sR0FBRyxzQkFBTVAscUJBQU4sQ0FBaEI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDUSxPQUFPLENBQUNDLGFBQVIsRUFBRCxDQUFOLENBQWdDRixJQUFoQyxDQUFxQyxJQUFyQztBQUNELEdBSEMsQ0FBRjtBQUlBUixFQUFBQSxFQUFFLENBQUMsaUJBQUQsRUFBb0IsTUFBTTtBQUMxQixVQUFNUyxPQUFPLEdBQUcsc0JBQU1QLHFCQUFOLENBQWhCO0FBQ0FELElBQUFBLE1BQU0sQ0FBQ1EsT0FBTyxDQUFDRSxFQUFSLENBQVdULHFCQUFYLENBQUQsQ0FBTixDQUFpQ00sSUFBakMsQ0FBc0MsSUFBdEM7QUFDRCxHQUhDLENBQUY7QUFJQVIsRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDLE1BQU07QUFDeEMsVUFBTVMsT0FBTyxHQUFHLHNCQUFNUCxxQkFBTixDQUFoQjtBQUNBRCxJQUFBQSxNQUFNLENBQUNRLE9BQU8sQ0FBQ0csSUFBUixDQUFhLG1DQUFiLEVBQWtEQyxJQUFsRCxFQUFELENBQU4sQ0FBaUVULE9BQWpFLENBQXlFLG9CQUF6RTtBQUNELEdBSEMsQ0FBRjtBQUlBVSxFQUFBQSxJQUFJLENBQUMsbUJBQUQsRUFBc0IsTUFBTTtBQUM5QixVQUFNTCxPQUFPLEdBQUcsNkJBQWFQLHFCQUFiLENBQWhCO0FBQ0FELElBQUFBLE1BQU0sQ0FBQ1EsT0FBTyxDQUFDTSxPQUFULENBQU4sQ0FBd0JDLGVBQXhCO0FBQ0QsR0FIRyxDQUFKO0FBSUFoQixFQUFBQSxFQUFFLENBQUMscUJBQUQsRUFBd0IsTUFBTTtBQUM5QixVQUFNUyxPQUFPLEdBQUcsc0JBQU1QLHFCQUFOLENBQWhCO0FBQ0FPLElBQUFBLE9BQU8sQ0FBQ1EsT0FBUjtBQUNELEdBSEMsQ0FBRjtBQUlBakIsRUFBQUEsRUFBRSxDQUFDLHFCQUFELEVBQXdCLE1BQU07QUFDOUJDLElBQUFBLE1BQU0sQ0FBQyxPQUFPQyxzQkFBYWdCLE9BQWIsQ0FBcUJDLE9BQTdCLENBQU4sQ0FBOENDLE9BQTlDLENBQXNELFVBQXREO0FBQ0FuQixJQUFBQSxNQUFNLENBQUNDLHNCQUFhZ0IsT0FBYixDQUFxQkMsT0FBckIsRUFBRCxDQUFOLENBQXVDRSxhQUF2QztBQUNELEdBSEMsQ0FBRjtBQUlELENBcENPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCB7IG1vdW50LCBzaGFsbG93TW91bnQgfSBmcm9tICdAdnVlL3Rlc3QtdXRpbHMnO1xuaW1wb3J0IEJvb3RzdHJhcFZ1ZSBmcm9tICdib290c3RyYXAtdnVlJ1xuaW1wb3J0IFByb2dyZXNzQmFycyBmcm9tICdAL3ZpZXdzL2Jhc2UvUHJvZ3Jlc3NCYXJzJ1xuXG5WdWUudXNlKEJvb3RzdHJhcFZ1ZSlcblxuamVzdC51c2VGYWtlVGltZXJzKClcblxuZGVzY3JpYmUoJ1Byb2dyZXNzQmFycy52dWUnLCAoKSA9PiB7XG4gIGl0KCdoYXMgYSBuYW1lJywgKCkgPT4ge1xuICAgIGV4cGVjdChQcm9ncmVzc0JhcnMubmFtZSkudG9NYXRjaCgncHJvZ3Jlc3MtYmFycycpXG4gIH0pXG4gIGl0KCdoYXMgYSBjcmVhdGVkIGhvb2snLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBQcm9ncmVzc0JhcnMuZGF0YSkudG9NYXRjaCgnZnVuY3Rpb24nKVxuICB9KVxuICBpdCgnc2V0cyB0aGUgY29ycmVjdCBkZWZhdWx0IGRhdGEnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHR5cGVvZiBQcm9ncmVzc0JhcnMuZGF0YSkudG9NYXRjaCgnZnVuY3Rpb24nKVxuICAgIGNvbnN0IGRlZmF1bHREYXRhID0gUHJvZ3Jlc3NCYXJzLmRhdGEoKVxuICAgIGV4cGVjdChkZWZhdWx0RGF0YS5jb3VudGVyKS50b0JlKDQ1KVxuICB9KVxuICBpdCgnaXMgVnVlIGluc3RhbmNlJywgKCkgPT4ge1xuICAgIGNvbnN0IHdyYXBwZXIgPSBtb3VudChQcm9ncmVzc0JhcnMpXG4gICAgZXhwZWN0KHdyYXBwZXIuaXNWdWVJbnN0YW5jZSgpKS50b0JlKHRydWUpXG4gIH0pXG4gIGl0KCdpcyBQcm9ncmVzc0JhcnMnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KFByb2dyZXNzQmFycylcbiAgICBleHBlY3Qod3JhcHBlci5pcyhQcm9ncmVzc0JhcnMpKS50b0JlKHRydWUpXG4gIH0pXG4gIGl0KCdzaG91bGQgcmVuZGVyIGNvcnJlY3QgY29udGVudCcsICgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gbW91bnQoUHJvZ3Jlc3NCYXJzKVxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ2hlYWRlci5jYXJkLWhlYWRlciA+IGRpdiA+IHN0cm9uZycpLnRleHQoKSkudG9NYXRjaCgnQm9vdHN0cmFwIFByb2dyZXNzJylcbiAgfSlcbiAgdGVzdCgncmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3dNb3VudChQcm9ncmVzc0JhcnMpXG4gICAgZXhwZWN0KHdyYXBwZXIuZWxlbWVudCkudG9NYXRjaFNuYXBzaG90KClcbiAgfSlcbiAgaXQoJ3Nob3VsZCBiZSBkZXN0cm95ZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KFByb2dyZXNzQmFycylcbiAgICB3cmFwcGVyLmRlc3Ryb3koKVxuICB9KVxuICBpdCgnc2hvdWxkIGhhdmUgbWV0aG9kcycsICgpID0+IHtcbiAgICBleHBlY3QodHlwZW9mIFByb2dyZXNzQmFycy5tZXRob2RzLmNsaWNrZWQgICkudG9FcXVhbCgnZnVuY3Rpb24nKVxuICAgIGV4cGVjdChQcm9ncmVzc0JhcnMubWV0aG9kcy5jbGlja2VkKCkpLnRvQmVVbmRlZmluZWQoKVxuICB9KVxufSlcbiJdfQ==